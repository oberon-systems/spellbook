#!/usr/bin/env bash
# shellcheck disable=SC2013
# shellcheck disable=SC2034
set -e

RUN="${1:-enable}"

# Built-in vars
[ -z "$USER" ] && USER="$(id -un)"
[ -z "$HOME" ] && HOME="$(getent passwd $USER | cut -d':' -f6)"

# Directories configs
SPELLS_DIR="${HOME}/.local/spellbook"
SCRIPT_BIN="$(readlink -f $0)"
SCRIPT_DIR=$(dirname "$SCRIPT_BIN")

CONFIG="${SCRIPT_DIR}/config.json"
SPELL_CONFIG=".spellbook.json"

# Temporary data configs
TEMP_PROFILE=$(mktemp /tmp/spellbook-profile.XXXXXX)

# System params
ARCH="$(uname -m)"
OS="$(uname -s | tr '[:upper:]' '[:lower:]')"

# UV Params
UV="${SPELLS_DIR}/bin/uv/uv"
UV_URL="https://github.com/astral-sh/uv/releases/latest/download/uv-${ARCH}-unknown-${OS}-gnu.tar.gz"

# Python and modules params
PYTHON="python3.12"
VIRTUAL_ENV="venv"
PRE_COMMIT_HOME=".pre-commit"

REQUIREMENTS=(
	"jq"
	"tar"
	"git"
	"curl"
)

# validate binaries
for _req in "${REQUIREMENTS[@]}"; do
	command -v "$_req" >/dev/null || {
		echo "ERROR: requirements not met!"
		echo "ERROR: $_req is missed!"
		exit 255
	}
done

# motd template
_motd() {
	cat <<EOF
#######################################
####  Spellbook by Oberon systems   ###
####      Development Console       ###
#######################################
# Now you are located into virtual environment
# where you can find different tools like 'cz'
# or 'pre-commit'.
#
# When you will finish please type 'exit' or
# press Ctrl^d for end this virtual environment.
#

EOF
}

# temporary profile template
_profile() {
	cat <<EOF
# spellbook temporary params
export PATH="${SPELLS_DIR}/bin/uv:$PATH"
export PRE_COMMIT_HOME="$(pwd)/.pre-commit"

. $(pwd)/.venv/bin/activate

$(jq -r '.spells[]' $SPELL_CONFIG)

# Auto-install pre-commit hooks
if [ ! -d .pre-commit ]; then
  echo "Pre-commit not found, installing..."
  pre-commit install-hooks
fi
pre-commit install > /dev/null
EOF
}

# Yes-or-No Questions
yorn() {
	default="$1"
	read -r answer
	[ -z "$answer" ] && answer="$default"
	case "$answer" in
	[Yy]*) return 0 ;;
	[Nn]*) return 1 ;;
	*)
		echo "Please answer y or n."
		yorn
		;;
	esac
}

# install uv
_uv() {
	mkdir -p "${SPELLS_DIR}/bin/uv"
	curl -LsSf "$UV_URL" | tar -xz -C "${SPELLS_DIR}/bin/uv" --strip-components=1
}

# install virtual environment
_venv() {
	if [ ! -f "$UV" ]; then
		echo "WARNING: uv binary nit found, installing..."
		$SCRIPT_BIN "uv"
	fi
	$UV venv --relocatable --python "$PYTHON"
	$UV pip install --upgrade pip
	$UV pip install -r "${SCRIPT_DIR}/requirements.txt"
}

# install files
_files() {
	# use jq end read from configs
	local tmp
	local files
	local copied

	tmp=$(mktemp)
	copied=()
	files=$(
		jq -r --slurpfile local "$SPELL_CONFIG" \
			'.files - $local[].files | .[]' \
			"$CONFIG"
	)
	# shellcheck disable=SC2206
	files=($files)
	[ "${#files[@]}" -eq 0 ] && {
		# files synced, skipped
		return
	}
	for file in "${files[@]}"; do
		cp -vi "${SCRIPT_DIR}/${file}" ./ || {
			echo "WARNING: Unable to copy $file"
		}
		[ -f "$file" ] && copied+=("$file")
	done
	echo "Copied ${#copied[@]}/${#files[@]} files"
	(
		jq -re --arg files "${copied[*]}" \
			'.files = (($files | split(" ")) + .files // [] | unique)' \
			"$SPELL_CONFIG" >"$tmp" && mv "$tmp" "$SPELL_CONFIG"
	) || {
		echo "ERROR: Unable to update local config's files list!"
		rm -f "$tmp"
		exit 255
	}
	rm -f "$tmp"
}

_spells() {
	local tmp
	local param
	local spells
	local installed
	local enabled

	installed=()
	enabled=()

	spells=$(
		jq -r --slurpfile local "$SPELL_CONFIG" \
			'(.spells | keys) - ($local[].spells | keys ) | .[]' \
			"$CONFIG"
	)
	# shellcheck disable=SC2206
	spells=($spells)
	[ "${#spells[@]}" -eq 0 ] && {
		# all spells installed
		return
	}
	# shellcheck disable=SC2005
	for spell in "${spells[@]}"; do
		echo
		echo "$($SCRIPT_DIR/spells/$spell _info)"
		echo
		echo "Spell $spell not installed, would you like to install it? [Y/n]: "
		yorn "Y" && {
			echo "Installing spell: $spell"
			"$SCRIPT_DIR/spells/$spell" "_install" "$SPELLS_DIR"
			installed+=("$spell")
			continue
		}
	done
	# we shall move enable to install
	for spell in "${installed[@]}"; do
		param=""
		echo "Would tou like to enable spell: $spell? [Y/n]: "
		yorn "Y" && {
			echo "Enable spell: $spell"
			param="$($SCRIPT_DIR/spells/$spell _enable $SPELLS_DIR)"
		}
		tmp=$(
			jq -cn --arg spell "$spell" \
				--arg param "$param" \
				'{$spell: $param}'
		)
		enabled+=("$tmp")
	done
	echo "Installed ${#installed[@]}/${#spells[@]} spells"
	echo "Enabled ${#enabled[@]} spells"
	tmp=$(mktemp)
	(
		jq -re --argjson spells "${enabled[*]}" \
			'.spells = ($spells + .spells // {})' \
			"$SPELL_CONFIG" >"$tmp" && mv "$tmp" "$SPELL_CONFIG"
	) || {
		echo "ERROR: Unable to update local config's files list!"
		rm -f "$tmp"
		exit 255
	}
	rm -f "$tmp"
}

install() {
	if ! grep -q "alias spell=" "${HOME}/.bashrc"; then
		echo "Installing alias"
		echo "alias spell=${SCRIPT_BIN}" >>"${HOME}/.bashrc"
	else
		echo "spell alias already set!"
	fi
}

# Enable virtual console
enable() {
	if [ ! -d ".git" ]; then
		echo "ERROR: not git directory, env start skipped..."
		exit 1
	fi

	if ! [ -f "$SPELL_CONFIG" ]; then
		echo "Spell config missed, creating dummy config..."
		cp "${SCRIPT_DIR}/dummy.json" "$SPELL_CONFIG"
	fi

	_files

	if [ ! -f ".venv/bin/python" ]; then
		echo "WARNING: virtual env not found, installing..."
		$SCRIPT_BIN "_venv"
	fi

	_spells

	echo "Starting Oberon Systems Developing Environment..."

	# build environment
	{
		cat "${HOME}/.bashrc"
		_profile
	} >"$TEMP_PROFILE"
	# print motd
	_motd
	# run env
	/usr/bin/env bash --init-file "$TEMP_PROFILE"
	.venv/bin/pre-commit uninstall >/dev/null
	rm -f "$TEMP_PROFILE"
}

$RUN
