#!/usr/bin/env bash
# shellcheck disable=SC2013
# shellcheck disable=SC2034
set -e

RUN="${1:-enable}"

# Built-in vars
[ -z "$USER" ] && USER="$(id -un)"
[ -z "$HOME" ] && HOME="$(getent passwd $USER | cut -d':' -f6)"

# Directories configs
SPELLS_DIR="${HOME}/.local/spellbook"
SCRIPT_BIN="$(readlink -f $0)"
SCRIPT_DIR=$(dirname "$SCRIPT_BIN")
SCRIPT_INC="$SCRIPT_DIR/inc"

CONFIG="${SCRIPT_DIR}/config.json"
SPELL_CONFIG=".spellbook.json"

# Temporary data configs
TEMP_PROFILE=$(mktemp /tmp/spellbook-profile.XXXXXX)

# System params
ARCH="$(uname -m)"
OS="$(uname -s | tr '[:upper:]' '[:lower:]')"

# UV Params
UV="${SPELLS_DIR}/bin/uv/uv"
UV_URL="https://github.com/astral-sh/uv/releases/latest/download/uv-${ARCH}-unknown-${OS}-gnu.tar.gz"

# Python and modules params
PYTHON="python3.12"
VIRTUAL_ENV="venv"
PRE_COMMIT_HOME=".pre-commit"

REQUIREMENTS=(
	"jq"
	"tar"
	"git"
	"curl"
)

# validate binaries
for _req in "${REQUIREMENTS[@]}"; do
	command -v "$_req" >/dev/null || {
		echo "ERROR: requirements not met!"
		echo "ERROR: $_req is missed!"
		exit 255
	}
done

_include() {
	local _path
	local _func
	local _content

	_path="${1:?}" || {
		echo "ERROR: include: path param is missed, but required!"
		exit 255
	}

	[ -f "$_path" ] || {
		echo "ERROR: include: $_path not found!"
		exit 255
	}

	_func=$(basename "$_path")
	_content=$(sed -e '1{/^#!/d;}' -e '/^[[:space:]]*$/d' "$_path")

	eval "$_func() {
    $_content
  }"
}

_include "$SCRIPT_INC/motd"
_include "$SCRIPT_INC/profile"
_include "$SCRIPT_INC/yorn"
_include "$SCRIPT_INC/files"
_include "$SCRIPT_INC/spells"

# fix: should be a spell
# install uv
_uv() {
	mkdir -p "${SPELLS_DIR}/bin/uv"
	curl -LsSf "$UV_URL" | tar -xz -C "${SPELLS_DIR}/bin/uv" --strip-components=1
}

# fix: should be a spell
# install virtual environment
_venv() {
	if [ ! -f "$UV" ]; then
		echo "WARNING: uv binary nit found, installing..."
		$SCRIPT_BIN "uv"
	fi
	$UV venv --relocatable --python "$PYTHON"
	$UV pip install --upgrade pip
	$UV pip install -r "${SCRIPT_DIR}/requirements.txt"
}

install() {
	if ! grep -q "alias spell=" "${HOME}/.bashrc"; then
		echo "Installing alias"
		echo "alias spell=${SCRIPT_BIN}" >>"${HOME}/.bashrc"
	else
		echo "spell alias already set!"
	fi
}

# Enable virtual console
enable() {
	if [ ! -d ".git" ]; then
		echo "ERROR: not git directory, env start skipped..."
		exit 1
	fi

	if ! [ -f "$SPELL_CONFIG" ]; then
		echo "Spell config missed, creating dummy config..."
		cp "${SCRIPT_DIR}/dummy.json" "$SPELL_CONFIG"
	fi

	files

	if [ ! -f ".venv/bin/python" ]; then
		echo "WARNING: virtual env not found, installing..."
		$SCRIPT_BIN "_venv"
	fi

	spells

	echo "Starting Oberon Systems Developing Environment..."

	# build environment
	{
		cat "${HOME}/.bashrc"
		profile
	} >"$TEMP_PROFILE"
	# print motd
	motd
	# run env
	/usr/bin/env bash --init-file "$TEMP_PROFILE"
	.venv/bin/pre-commit uninstall >/dev/null
	rm -f "$TEMP_PROFILE"
}

$RUN
